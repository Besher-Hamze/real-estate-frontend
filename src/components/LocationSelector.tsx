import React from 'react';\nimport { useLocationData } from '@/hooks/useLocationData';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { LoadingSpinner } from '@/components/LoadingSpinner';\nimport { MapPin, Building, Home, Navigation } from 'lucide-react';\n\ninterface LocationSelectorProps {\n    onLocationChange?: (locationData: {\n        cityId: number | null;\n        neighborhoodId: number | null;\n        finalCityId?: number | null;\n        locationPath: string;\n    }) => void;\n    initialCityId?: number;\n    initialNeighborhoodId?: number;\n    initialFinalCityId?: number;\n    required?: boolean;\n    className?: string;\n}\n\nexport const LocationSelector: React.FC<LocationSelectorProps> = ({\n    onLocationChange,\n    initialCityId,\n    initialNeighborhoodId,\n    initialFinalCityId,\n    required = false,\n    className = ''\n}) => {\n    const {\n        cities,\n        neighborhoods,\n        finalCities,\n        selectedCityId,\n        selectedNeighborhoodId,\n        loading,\n        error,\n        setSelectedCityId,\n        setSelectedNeighborhoodId,\n        getLocationPath,\n        resetSelections\n    } = useLocationData();\n\n    const [selectedFinalCityId, setSelectedFinalCityId] = React.useState<number | null>(initialFinalCityId || null);\n\n    // تعيين القيم الأولية\n    React.useEffect(() => {\n        if (initialCityId && !selectedCityId) {\n            setSelectedCityId(initialCityId);\n        }\n        if (initialNeighborhoodId && !selectedNeighborhoodId) {\n            setSelectedNeighborhoodId(initialNeighborhoodId);\n        }\n    }, [initialCityId, initialNeighborhoodId, selectedCityId, selectedNeighborhoodId]);\n\n    // إرسال التغييرات للمكون الوالد\n    React.useEffect(() => {\n        if (onLocationChange) {\n            onLocationChange({\n                cityId: selectedCityId,\n                neighborhoodId: selectedNeighborhoodId,\n                finalCityId: selectedFinalCityId,\n                locationPath: getLocationPath()\n            });\n        }\n    }, [selectedCityId, selectedNeighborhoodId, selectedFinalCityId, onLocationChange, getLocationPath]);\n\n    const handleCityChange = (cityId: string) => {\n        const id = cityId ? Number(cityId) : null;\n        setSelectedCityId(id);\n        setSelectedFinalCityId(null); // إعادة تعيين المنطقة النهائية\n    };\n\n    const handleNeighborhoodChange = (neighborhoodId: string) => {\n        const id = neighborhoodId ? Number(neighborhoodId) : null;\n        setSelectedNeighborhoodId(id);\n        setSelectedFinalCityId(null); // إعادة تعيين المنطقة النهائية\n    };\n\n    const handleFinalCityChange = (finalCityId: string) => {\n        const id = finalCityId ? Number(finalCityId) : null;\n        setSelectedFinalCityId(id);\n    };\n\n    if (loading && cities.length === 0) {\n        return <LoadingSpinner message=\"جاري تحميل بيانات المواقع...\" />;\n    }\n\n    return (\n        <Card className={className}>\n            <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-5 h-5 text-blue-500\" />\n                    اختيار الموقع\n                    {required && <span className=\"text-red-500\">*</span>}\n                </CardTitle>\n                {getLocationPath() && (\n                    <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"text-sm\">\n                            {getLocationPath()}\n                        </Badge>\n                        <button\n                            onClick={() => {\n                                resetSelections();\n                                setSelectedFinalCityId(null);\n                            }}\n                            className=\"text-xs text-red-600 hover:text-red-700\"\n                        >\n                            إعادة تعيين\n                        </button>\n                    </div>\n                )}\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n                {error && (\n                    <div className=\"text-sm text-red-600 bg-red-50 p-3 rounded-md\">\n                        {error}\n                    </div>\n                )}\n\n                {/* اختيار المدينة */}\n                <div className=\"space-y-2\">\n                    <Label htmlFor=\"city-select\" className=\"flex items-center gap-2\">\n                        <Building className=\"w-4 h-4 text-blue-500\" />\n                        المدينة\n                        {required && <span className=\"text-red-500\">*</span>}\n                    </Label>\n                    <select\n                        id=\"city-select\"\n                        value={selectedCityId || ''}\n                        onChange={(e) => handleCityChange(e.target.value)}\n                        className=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                        disabled={loading}\n                    >\n                        <option value=\"\">اختر المدينة</option>\n                        {cities.map((city) => (\n                            <option key={city.id} value={city.id}>\n                                {city.name}\n                            </option>\n                        ))}\n                    </select>\n                    {cities.length > 0 && (\n                        <p className=\"text-xs text-gray-500\">\n                            {cities.length} مدينة متاحة\n                        </p>\n                    )}\n                </div>\n\n                {/* اختيار الحي */}\n                {selectedCityId && (\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"neighborhood-select\" className=\"flex items-center gap-2\">\n                            <Home className=\"w-4 h-4 text-green-500\" />\n                            الحي\n                            {required && <span className=\"text-red-500\">*</span>}\n                        </Label>\n                        <select\n                            id=\"neighborhood-select\"\n                            value={selectedNeighborhoodId || ''}\n                            onChange={(e) => handleNeighborhoodChange(e.target.value)}\n                            className=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                            disabled={loading || neighborhoods.length === 0}\n                        >\n                            <option value=\"\">اختر الحي</option>\n                            {neighborhoods.map((neighborhood) => (\n                                <option key={neighborhood.id} value={neighborhood.id}>\n                                    {neighborhood.name}\n                                </option>\n                            ))}\n                        </select>\n                        \n                        {loading && neighborhoods.length === 0 && (\n                            <p className=\"text-xs text-blue-600\">جاري تحميل الأحياء...</p>\n                        )}\n                        \n                        {!loading && neighborhoods.length === 0 && selectedCityId && (\n                            <p className=\"text-xs text-gray-500\">لا توجد أحياء متاحة لهذه المدينة</p>\n                        )}\n                        \n                        {neighborhoods.length > 0 && (\n                            <p className=\"text-xs text-gray-500\">\n                                {neighborhoods.length} حي متاح\n                            </p>\n                        )}\n                    </div>\n                )}\n\n                {/* اختيار المنطقة النهائية */}\n                {selectedNeighborhoodId && finalCities.length > 0 && (\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"final-city-select\" className=\"flex items-center gap-2\">\n                            <Navigation className=\"w-4 h-4 text-purple-500\" />\n                            المنطقة النهائية\n                        </Label>\n                        <select\n                            id=\"final-city-select\"\n                            value={selectedFinalCityId || ''}\n                            onChange={(e) => handleFinalCityChange(e.target.value)}\n                            className=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                            disabled={loading || finalCities.length === 0}\n                        >\n                            <option value=\"\">اختر المنطقة (اختياري)</option>\n                            {finalCities.map((finalCity) => (\n                                <option key={finalCity.id} value={finalCity.id}>\n                                    {finalCity.name}\n                                </option>\n                            ))}\n                        </select>\n                        \n                        {loading && finalCities.length === 0 && (\n                            <p className=\"text-xs text-blue-600\">جاري تحميل المناطق...</p>\n                        )}\n                        \n                        {finalCities.length > 0 && (\n                            <p className=\"text-xs text-gray-500\">\n                                {finalCities.length} منطقة متاحة\n                            </p>\n                        )}\n                    </div>\n                )}\n\n                {/* ملخص الاختيار */}\n                {(selectedCityId || selectedNeighborhoodId) && (\n                    <div className=\"mt-4 p-3 bg-gray-50 rounded-md\">\n                        <h4 className=\"text-sm font-medium text-gray-700 mb-2\">ملخص الموقع المختار:</h4>\n                        <div className=\"space-y-1\">\n                            {selectedCityId && (\n                                <p className=\"text-sm text-gray-600\">\n                                    المدينة: {cities.find(c => c.id === selectedCityId)?.name}\n                                </p>\n                            )}\n                            {selectedNeighborhoodId && (\n                                <p className=\"text-sm text-gray-600\">\n                                    الحي: {neighborhoods.find(n => n.id === selectedNeighborhoodId)?.name}\n                                </p>\n                            )}\n                            {selectedFinalCityId && (\n                                <p className=\"text-sm text-gray-600\">\n                                    المنطقة: {finalCities.find(fc => fc.id === selectedFinalCityId)?.name}\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n};\n"